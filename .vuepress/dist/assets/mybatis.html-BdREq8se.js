import{_ as o,c as d,a as t,o as a}from"./app-C1d_sUkO.js";const c={};function s(i,e){return a(),d("div",null,e[0]||(e[0]=[t('<p>MyBatis 是一款<strong>半自动化的 ORM（对象关系映射）框架</strong>，由 Apache 开源（原名 iBatis）。它的核心作用是<strong>将 SQL 语句与Java代码解耦</strong>，允许开发者通过 XML 或注解方式编写 SQL，同时将查询结果映射为 Java 对象。</p><p><strong>核心特点</strong></p><ul><li><strong>灵活性</strong>：不强制封装 SQL，开发者可自由编写复杂 SQL（如多表关联、存储过程）。</li><li><strong>轻量级</strong>：无需完整的框架依赖，仅通过配置文件或注解即可快速集成。</li><li><strong>性能优化</strong>：支持 SQL 缓存、延迟加载、动态 SQL 等性能优化机制。</li></ul><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span><code>#{}</code>和<code>${}</code>的区别</span></a></h3><p><strong><code>${}</code>是在<code>Properties</code>文件中使用的变量占位符</strong>，在 MyBatis 执行 SQL 语句之前，会将<code>${}</code>中的内容直接替换成对应的值，属于原样替换。无论<code>${}</code>内的内容是什么，都会被原封不动地拼接到 SQL 语句中。 比如根据参数按任意字段排序的需求：</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">   select * from users order by ${orderCols}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>orderCols</code>参数可以传入<code>name</code>、<code>name desc</code>、<code>name</code>,<code>sex asc</code>等不同的值，实现灵活的排序效果。</p><p><strong><code>#{}</code>是SQL参数占位符</strong>。MyBatis会将SQL语句中的<code>#{}</code>替换为?，在执行SQL语句时，通过<code>PreparedStatement</code>的参数设置方法，按照顺序为?占位符设置具体的参数值。这种方式能够有效避免 SQL 注入问题，因为参数值是通过预编译的方式设置的，而不是直接拼接在 SQL 语句中。 比如<code>ps.setInt(0, parameterValue)</code>，<code>#{item.name}</code>的取值方式为使用反射从参数对象中获取<code>item</code>对象的<code>name</code>属性值，相当于<code>param.getItem().getName()</code>。</p><h3 id="xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签" tabindex="-1"><a class="header-anchor" href="#xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签"><span>xml 映射文件中，除了常见的<code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code>标签之外，还有哪些标签？</span></a></h3><p><strong>动态SQL标签</strong>：<code>&lt;where&gt;</code>,<code>if</code>,<code>foreach</code>,<code>set</code>,<code>choose</code>,<code>when</code>,<code>otherwise</code>,<code>trim</code>.</p><p><strong>结果映射标签</strong>: <code>resultMap</code>,<code>constructor</code>.</p><p><strong>SQL片段与引用标签</strong>：<code>sql</code>,<code>include</code>.</p><p><strong>其他标签</strong>：<code>bind</code>,<code>selectKey</code>(为不支持自增的主键生成策略标签)等。</p><h3 id="dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗" tabindex="-1"><a class="header-anchor" href="#dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗"><span>Dao接口的工作原理是什么，Dao接口里的方法，参数不同时，方法能重载吗？</span></a></h3><p>Dao接口就是Mapper接口，接口的全限名，就是映射文件的<code>namespace</code>的值。接口的方法名就是映射文件中<code>MappedStatement</code>的id值，接口的参数就是传递给sql的参数。</p><p>Dao接口的工作原理是JDK动态代理，MyBatis运行时会使用JDK动态代理为Dao接口生成<code>poxy</code>对象，代理对象<code>poxy</code>会拦截接口方法，转而执行<code>MappedStatement</code>所代表的sql，将sql执行结果返回。</p><p>Dao接口可以有多个重载方法，但是多个接口对应的映射必须只有一个。Dao接口里的方法可以重载，但是MyBatis的xml里面的ID必须唯一。</p><p>Dao方法可以重载，必须满足：</p><ul><li>仅有一个无参方法和一个有参方法</li><li>多个有参方法时，参数数量必须一致。且使用相同的<code>@param</code>，或者使用<code>@param1</code>这种。</li></ul><h3 id="mybatis如何进行分页-分页插件的原理" tabindex="-1"><a class="header-anchor" href="#mybatis如何进行分页-分页插件的原理"><span>MyBatis如何进行分页，分页插件的原理</span></a></h3><ul><li>MyBatis通过RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。</li><li>在sql内直接书写带有物理分页的参数来实现物理分页功能</li><li>使用分页插件进行物理分页。分页插件的实现原理是使用MyBatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li></ul><h3 id="简述-mybatis-的插件运行原理-以及如何编写一个插件" tabindex="-1"><a class="header-anchor" href="#简述-mybatis-的插件运行原理-以及如何编写一个插件"><span>简述 MyBatis 的插件运行原理，以及如何编写一个插件</span></a></h3><p>MyBatis仅可以编写针对<code>ParameterHandler</code>、<code>ResultSetHandler</code>、<code>StatementHandler</code>、<code>Executor</code>这四种接口的插件， MyBatis使用JDK的动态代理，为需要拦截的接口生成代理对象以及实现接口方法的拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是<code>InvocationHandler</code>的<code>invoke()</code>方法，当然，只需要拦截那些指定的方法。</p><p>实现MyBatis的<code>Interceptor</code>接口并复写<code>intercept()</code>方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可</p><p>参考文章：</p><p>https://javaguide.cn/system-design/framework/mybatis/mybatis-interview.html</p>',26)]))}const n=o(c,[["render",s]]),r=JSON.parse('{"path":"/blogs/houduanxuexi/2018/mybatis.html","title":"MyBatis学习总结","lang":"en-US","frontmatter":{"title":"MyBatis学习总结","date":"2025/3/28","tags":["框架"],"categories":["后端学习"]},"headers":[{"level":3,"title":"#{}和${}的区别","slug":"和-的区别","link":"#和-的区别","children":[]},{"level":3,"title":"xml 映射文件中，除了常见的select、insert、update、delete标签之外，还有哪些标签？","slug":"xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签","link":"#xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签","children":[]},{"level":3,"title":"Dao接口的工作原理是什么，Dao接口里的方法，参数不同时，方法能重载吗？","slug":"dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗","link":"#dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗","children":[]},{"level":3,"title":"MyBatis如何进行分页，分页插件的原理","slug":"mybatis如何进行分页-分页插件的原理","link":"#mybatis如何进行分页-分页插件的原理","children":[]},{"level":3,"title":"简述 MyBatis 的插件运行原理，以及如何编写一个插件","slug":"简述-mybatis-的插件运行原理-以及如何编写一个插件","link":"#简述-mybatis-的插件运行原理-以及如何编写一个插件","children":[]}],"git":{"createdTime":1749099634000,"updatedTime":1749099634000,"contributors":[{"name":"zxy","email":"zxy0613zxy@outlook.com","commits":1}]},"filePathRelative":"blogs/houduanxuexi/2018/mybatis.md"}');export{n as comp,r as data};
